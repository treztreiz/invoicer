name: invoicer

services:

    web:
        image: nginx:alpine
        restart: unless-stopped
        volumes:
            - ./conf.d/nginx.conf:/etc/nginx/conf.d/default.conf:ro
            - ./certs/dev:/etc/nginx/certs:ro
            - ../backend/public:/srv/backend/public:ro
        extra_hosts:
            - host.docker.internal:host-gateway
        ports:
            - "8000:443"
            - "8080:80"
        depends_on:
            - backend
            - frontend

    backend:
        build:
            context: ..
            dockerfile: ops/backend.Dockerfile
            target: dev
        restart: unless-stopped
        user: "${UID:-1000}:${GID:-1000}"
        environment:
            APP_ENV: "${APP_ENV:-dev}"
            XDEBUG_MODE: "${XDEBUG_MODE:-off}"
            APP_SECRET: change_me
            DATABASE_URL: postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@database:5432/${POSTGRES_DB:-app}?serverVersion=${POSTGRES_VERSION:-18}&charset=${POSTGRES_CHARSET:-utf8}
        volumes:
            - ../backend:/app
        depends_on:
            - database

    database:
        image: postgres:18-alpine
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB:-app}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
            POSTGRES_USER: ${POSTGRES_USER:-app}
        healthcheck:
            test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}" ]
            timeout: 5s
            retries: 5
            start_period: 60s
        volumes:
            - database_data:/var/lib/postgresql/data:rw

    frontend:
        build:
            context: ..
            dockerfile: ops/frontend.Dockerfile
            target: dev
        restart: unless-stopped
        user: "${UID:-1000}:${GID:-1000}"
        volumes:
            - ../frontend:/app

volumes:
    database_data:
